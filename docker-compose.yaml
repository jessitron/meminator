services:
  backend-for-frontend:
    build:
      context: services/backend-for-frontend-java
      dockerfile: Dockerfile
      platforms:
        # this is useful for pushing to Dockerhub, not for local builds
        - linux/amd64
        - linux/arm64
    image: ${IMAGE_REPO_USER}/backend-for-frontend-java:${IMAGE_TAG}
    ports:
      - "10115:10114" # Expose the port your Express app is listening on
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_METRICS_PROTOCOL=http/protobuf
      - OTEL_EXPORTER_OTLP_LOG_PROTOCOL=http
      - OTEL_SERVICE_NAME=backend-for-frontend-java

  meminator:
    build:
      context: services/meminator-java
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: ${IMAGE_REPO_USER}/meminator-java:${IMAGE_TAG}
    ports:
      - "10116:10114" # they can't be the same
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=meminator-java
      - OTEL_EXPORTER_OTLP_LOG_PROTOCOL=http
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf

  phrase-picker:
    build:
      context: services/phrase-picker-java
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: ${IMAGE_REPO_USER}/phrase-picker-java:${IMAGE_TAG}
    ports:
      - "10117:10114" # the outer ports can't be the same
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=phrase-picker-java
      - OTEL_EXPORTER_OTLP_LOG_PROTOCOL=http

  image-picker:
    build:
      context: services/image-picker-nodejs
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    image: ${IMAGE_REPO_USER}/image-picker-nodejs:${IMAGE_TAG}
    ports:
      - "10118:10114" # the outer ports can't be the same
    environment:
      - BUCKET_NAME
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=image-picker-nodejs

  web:
    build:
      context: services/web
      dockerfile: Dockerfile
      args:
        HONEYCOMB_API_KEY: ${HONEYCOMB_API_KEY}
      platforms:
        - linux/amd64
        - linux/arm64
    image: ${IMAGE_REPO_USER}/web:${IMAGE_TAG}
    # volumes: # uncomment this for faster development on the frontend
    #   - ./services/web/dist:/usr/share/nginx/html # Mount directory containing static files -- only do this for development
    ports:
      - "8080:80" # Expose port 8080 for Nginx

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.96.0
    ports:
      - "4317:4317" # OpenTelemetry gRPC
      - "4318:4318" # OpenTelemetry HTTP
    volumes:
      - ./services/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    environment:
      - HONEYCOMB_API_KEY

  # loadgen:
  #   build:
  #     context: services/loadgen
  #     dockerfile: Dockerfile
  #     platforms:
  #       - linux/amd64
  #       - linux/arm64
  #   image: ${IMAGE_REPO_USER}/loadgen:${IMAGE_TAG}
  #   environment:
  #     - LOAD_URL=http://web/backend/createPicture
  #     - MIN_SLEEP=1
  #     - MAX_SLEEP=5
  #     - HONEYCOMB_API_KEY
